@page "/account-test"

@inject HttpClient _httpClient

<PageTitle>Account test</PageTitle>

<p>This page is testing your account on the server side.</p>

<button class="btn, btn-primary" @onclick="CheckTestRole">Check TestRole</button>
<p>@_checkTestRoleResponse</p>

<p>List of claims from <b>Access Token</b> is passed to the API server by the frontend | Count: @_userInfo.Claims.Count()</p>

<table class="table">
    <thead>
        <tr>
            <th>Type</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        @foreach (ClaimValue claim in _userInfo.Claims)
        {
            <tr>
                <td>@claim.Type</td>
                <td>@claim.Value</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private UserInfo _userInfo = UserInfo.Anonymous;

    private string? _checkTestRoleResponse;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _userInfo = await _httpClient.GetFromJsonAsync<UserInfo>("/api/Account/UserInfo") ?? UserInfo.Anonymous;
        }
        catch (AccessTokenNotAvailableException)
        {
            // Since the endpoint is anonymous, it would be better to use a default HttpClient without the BaseAddressAuthorizationMessageHandler.
        }
    }

    private async Task CheckTestRole()
    {
        try
        {
            using HttpResponseMessage response = await _httpClient.GetAsync("/api/Account/TestRole");

            _checkTestRoleResponse = $"StatusCode: {response.StatusCode}";
        }
        catch (AccessTokenNotAvailableException)
        {
            // It would be better to use a default HttpClient without the BaseAddressAuthorizationMessageHandler.

            _checkTestRoleResponse = "You need to log in";
        }
    }
}
