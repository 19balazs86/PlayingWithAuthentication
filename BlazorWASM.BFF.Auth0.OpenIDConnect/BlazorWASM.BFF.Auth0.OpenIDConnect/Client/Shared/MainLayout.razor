@inherits LayoutComponentBase

@inject NavigationManager _navigation
@inject IHttpClientFactory _httpClientFactory

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4 auth">
            <AuthorizeView>
                <Authorized>
                    <img class="rounded" src="@getAvatarUrl(context)" />

                    <strong class="m-1">Hello, @context?.User?.Identity?.Name!</strong>

                    <form method="post" action="@AuthDefaults.LogOutPath">
                        <AntiForgeryTokenInput />
                        <button class="btn btn-link" type="submit">Sign out (App)</button>
                    </form>

                    <button class="btn btn-link" @onclick="signOutOnClick">Sign out (Auth0 + App)</button>
                </Authorized>
                <NotAuthorized>
                    <a href="@AuthDefaults.LogInPath">Log in</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
</div>

@code {
    private const string _defaultAvatarUrl = "https://www.gravatar.com/avatar/nopicture?d=monsterid&s=50";

    private string getAvatarUrl(AuthenticationState state)
    {
        Claim? claim = state?.User?.Claims.FirstOrDefault(c => c.Type == "picture");

        return claim is null ? _defaultAvatarUrl : claim.Value;
    }

    private async Task signOutOnClick()
    {
        HttpClient httpClient = _httpClientFactory.CreateClient(AuthDefaults.AuthorizedClientName);

        string logoutUrl = await httpClient.GetStringAsync(AuthDefaults.LogOutUrl);

        string returnUrl = _navigation.ToAbsoluteUri(AuthDefaults.LogOutPath).ToString();

        // Note: <BaseAddress>/LogOutPath needs to be present as "Allowed Logout URLs" in the Auth0 application.

        logoutUrl += $"&returnTo={returnUrl}";

        _navigation.NavigateTo(logoutUrl);
    }
}